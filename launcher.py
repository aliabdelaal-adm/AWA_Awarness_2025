#!/usr/bin/env python3
"""
AWA Content Generation Platform Launcher
Launch tool for generating videos, presentations, reports, and Excel files
المنصة الموحدة لتوليد المحتوى - فيديوهات، عروض، تقارير، وملفات Excel
"""

import os
import sys
import argparse
from pathlib import Path
from colorama import init, Fore, Style

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# Initialize colorama
init(autoreset=True)


def print_banner():
    """Print application banner"""
    print(f"{Fore.CYAN}{'='*70}")
    print(f"{Fore.CYAN}   AWA AI Content Generation Platform")
    print(f"{Fore.CYAN}   منصة AWA لتوليد المحتوى بالذكاء الاصطناعي")
    print(f"{Fore.CYAN}{'='*70}\n")


def print_menu():
    """Print main menu"""
    print(f"{Fore.YELLOW}Select content type to generate / اختر نوع المحتوى للتوليد:")
    print(f"{Fore.GREEN}1. {Fore.WHITE}Video Generation          / توليد فيديو")
    print(f"{Fore.GREEN}2. {Fore.WHITE}PowerPoint Presentation   / عرض PowerPoint")
    print(f"{Fore.GREEN}3. {Fore.WHITE}Professional Report (Word)/ تقرير احترافي (Word)")
    print(f"{Fore.GREEN}4. {Fore.WHITE}PDF Report                / تقرير PDF")
    print(f"{Fore.GREEN}5. {Fore.WHITE}Excel Spreadsheet         / ملف Excel")
    print(f"{Fore.GREEN}6. {Fore.WHITE}Generate All Formats      / توليد جميع الصيغ")
    print(f"{Fore.GREEN}0. {Fore.WHITE}Exit                      / خروج")
    print()


def get_user_choice():
    """Get user menu choice"""
    while True:
        try:
            choice = input(f"{Fore.CYAN}Enter your choice / أدخل اختيارك (0-6): {Style.RESET_ALL}")
            choice = int(choice)
            if 0 <= choice <= 6:
                return choice
            else:
                print(f"{Fore.RED}Invalid choice. Please enter a number between 0-6.")
        except ValueError:
            print(f"{Fore.RED}Invalid input. Please enter a number.")
        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}Exiting...")
            sys.exit(0)


def get_pdf_path():
    """Get PDF file path from user"""
    while True:
        pdf_path = input(f"{Fore.CYAN}Enter PDF file path / أدخل مسار ملف PDF: {Style.RESET_ALL}").strip()
        
        # Remove quotes if present
        pdf_path = pdf_path.strip('"').strip("'")
        
        if os.path.exists(pdf_path):
            if pdf_path.lower().endswith('.pdf'):
                return pdf_path
            else:
                print(f"{Fore.RED}File must be a PDF. Please try again.")
        else:
            print(f"{Fore.RED}File not found: {pdf_path}")
            print(f"{Fore.YELLOW}Please make sure the file exists and the path is correct.")


def get_title():
    """Get title from user"""
    title = input(f"{Fore.CYAN}Enter title / أدخل العنوان (press Enter for default): {Style.RESET_ALL}").strip()
    return title if title else None


def get_language():
    """Get language from user"""
    while True:
        lang = input(f"{Fore.CYAN}Language / اللغة (ar/en) [ar]: {Style.RESET_ALL}").strip().lower()
        if not lang:
            return 'ar'
        if lang in ['ar', 'en']:
            return lang
        print(f"{Fore.RED}Invalid language. Please enter 'ar' or 'en'.")


def generate_video(pdf_path, title, language):
    """Generate video from PDF"""
    from main import VideoGenerationApp
    
    print(f"\n{Fore.CYAN}🎬 Generating video...")
    
    try:
        app = VideoGenerationApp()
        output_name = f"{Path(pdf_path).stem}_video.mp4" if not title else f"{title.replace(' ', '_')}.mp4"
        app.run(pdf_path, output_name, title, language)
        return True
    except Exception as e:
        print(f"{Fore.RED}Error generating video: {e}")
        import traceback
        traceback.print_exc()
        return False


def generate_presentation(pdf_path, title, language):
    """Generate PowerPoint presentation from PDF"""
    from modules.pdf_processor import PDFProcessor
    from modules.presentation_generator import PresentationGenerator
    
    print(f"\n{Fore.CYAN}📊 Generating PowerPoint presentation...")
    
    try:
        # Process PDF
        processor = PDFProcessor(pdf_path)
        text_chunks = processor.split_into_chunks(300)
        
        # Generate presentation
        ppt_gen = PresentationGenerator()
        
        if not title:
            title = Path(pdf_path).stem.replace('_', ' ').title()
        
        subtitle = "Generated by AWA AI Platform"
        output_path = ppt_gen.generate_from_chunks(text_chunks, title, subtitle)
        
        print(f"{Fore.GREEN}✓ PowerPoint presentation created: {output_path}")
        return True
    except Exception as e:
        print(f"{Fore.RED}Error generating presentation: {e}")
        import traceback
        traceback.print_exc()
        return False


def generate_word_report(pdf_path, title, language):
    """Generate Word report from PDF"""
    from modules.pdf_processor import PDFProcessor
    from modules.report_generator import ReportGenerator
    
    print(f"\n{Fore.CYAN}📄 Generating Word report...")
    
    try:
        # Process PDF
        processor = PDFProcessor(pdf_path)
        text_chunks = processor.split_into_chunks(500)
        
        # Generate report
        report_gen = ReportGenerator()
        
        if not title:
            title = Path(pdf_path).stem.replace('_', ' ').title()
        
        subtitle = "Professional Report - Generated by AWA AI Platform"
        output_path = report_gen.generate_word_report(text_chunks, title, subtitle)
        
        print(f"{Fore.GREEN}✓ Word report created: {output_path}")
        return True
    except Exception as e:
        print(f"{Fore.RED}Error generating Word report: {e}")
        import traceback
        traceback.print_exc()
        return False


def generate_pdf_report(pdf_path, title, language):
    """Generate PDF report from PDF"""
    from modules.pdf_processor import PDFProcessor
    from modules.report_generator import ReportGenerator
    
    print(f"\n{Fore.CYAN}📑 Generating PDF report...")
    
    try:
        # Process PDF
        processor = PDFProcessor(pdf_path)
        text_chunks = processor.split_into_chunks(500)
        
        # Generate report
        report_gen = ReportGenerator()
        
        if not title:
            title = Path(pdf_path).stem.replace('_', ' ').title()
        
        subtitle = "Professional Report - Generated by AWA AI Platform"
        output_path = report_gen.generate_pdf_report(text_chunks, title, subtitle)
        
        print(f"{Fore.GREEN}✓ PDF report created: {output_path}")
        return True
    except Exception as e:
        print(f"{Fore.RED}Error generating PDF report: {e}")
        import traceback
        traceback.print_exc()
        return False


def generate_excel(pdf_path, title, language):
    """Generate Excel file from PDF"""
    from modules.pdf_processor import PDFProcessor
    from modules.excel_generator import ExcelGenerator
    
    print(f"\n{Fore.CYAN}📊 Generating Excel spreadsheet...")
    
    try:
        # Process PDF
        processor = PDFProcessor(pdf_path)
        text_chunks = processor.split_into_chunks(300)
        
        # Generate Excel
        excel_gen = ExcelGenerator()
        
        if not title:
            title = Path(pdf_path).stem.replace('_', ' ').title()
        
        output_path = excel_gen.generate_from_chunks(text_chunks, title)
        
        print(f"{Fore.GREEN}✓ Excel file created: {output_path}")
        return True
    except Exception as e:
        print(f"{Fore.RED}Error generating Excel file: {e}")
        import traceback
        traceback.print_exc()
        return False


def generate_all_formats(pdf_path, title, language):
    """Generate all formats from PDF"""
    print(f"\n{Fore.CYAN}🚀 Generating all formats...")
    
    results = []
    
    # Generate PowerPoint
    results.append(("PowerPoint", generate_presentation(pdf_path, title, language)))
    
    # Generate Word Report
    results.append(("Word Report", generate_word_report(pdf_path, title, language)))
    
    # Generate PDF Report
    results.append(("PDF Report", generate_pdf_report(pdf_path, title, language)))
    
    # Generate Excel
    results.append(("Excel", generate_excel(pdf_path, title, language)))
    
    # Generate Video
    results.append(("Video", generate_video(pdf_path, title, language)))
    
    # Print summary
    print(f"\n{Fore.CYAN}{'='*70}")
    print(f"{Fore.CYAN}Generation Summary / ملخص التوليد:")
    print(f"{Fore.CYAN}{'='*70}")
    
    for format_name, success in results:
        status = f"{Fore.GREEN}✓ SUCCESS" if success else f"{Fore.RED}✗ FAILED"
        print(f"{status} - {format_name}")
    
    print(f"{Fore.CYAN}{'='*70}\n")


def interactive_mode():
    """Run in interactive mode"""
    print_banner()
    
    while True:
        print_menu()
        choice = get_user_choice()
        
        if choice == 0:
            print(f"{Fore.YELLOW}Thank you for using AWA Platform! / شكراً لاستخدام منصة AWA!")
            break
        
        # Get common inputs
        pdf_path = get_pdf_path()
        title = get_title()
        language = get_language()
        
        # Execute based on choice
        if choice == 1:
            generate_video(pdf_path, title, language)
        elif choice == 2:
            generate_presentation(pdf_path, title, language)
        elif choice == 3:
            generate_word_report(pdf_path, title, language)
        elif choice == 4:
            generate_pdf_report(pdf_path, title, language)
        elif choice == 5:
            generate_excel(pdf_path, title, language)
        elif choice == 6:
            generate_all_formats(pdf_path, title, language)
        
        print(f"\n{Fore.GREEN}{'='*70}\n")


def command_line_mode(args):
    """Run in command-line mode"""
    print_banner()
    
    pdf_path = args.pdf
    title = args.title
    language = args.language or 'ar'
    
    # Check if PDF exists
    if not os.path.exists(pdf_path):
        print(f"{Fore.RED}Error: PDF file not found: {pdf_path}")
        sys.exit(1)
    
    # Generate based on format
    if args.format == 'video':
        generate_video(pdf_path, title, language)
    elif args.format == 'powerpoint' or args.format == 'pptx':
        generate_presentation(pdf_path, title, language)
    elif args.format == 'word' or args.format == 'docx':
        generate_word_report(pdf_path, title, language)
    elif args.format == 'pdf':
        generate_pdf_report(pdf_path, title, language)
    elif args.format == 'excel' or args.format == 'xlsx':
        generate_excel(pdf_path, title, language)
    elif args.format == 'all':
        generate_all_formats(pdf_path, title, language)


def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(
        description='AWA Content Generation Platform - منصة AWA لتوليد المحتوى',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples / أمثلة:
  # Interactive mode / الوضع التفاعلي
  python launcher.py
  
  # Generate specific format / توليد صيغة محددة
  python launcher.py input.pdf --format powerpoint --title "My Presentation"
  python launcher.py input.pdf --format word --title "تقرير احترافي" --language ar
  python launcher.py input.pdf --format excel
  python launcher.py input.pdf --format video
  
  # Generate all formats / توليد جميع الصيغ
  python launcher.py input.pdf --format all --title "Complete Package"

Supported formats / الصيغ المدعومة:
  - video      : MP4 video / فيديو
  - powerpoint : PowerPoint presentation / عرض تقديمي
  - word       : Word document / مستند Word
  - pdf        : PDF report / تقرير PDF
  - excel      : Excel spreadsheet / جدول Excel
  - all        : All formats / جميع الصيغ
        """
    )
    
    parser.add_argument('pdf', nargs='?', help='Path to PDF file')
    parser.add_argument('-f', '--format', 
                       choices=['video', 'powerpoint', 'pptx', 'word', 'docx', 'pdf', 'excel', 'xlsx', 'all'],
                       help='Output format type')
    parser.add_argument('-t', '--title', help='Content title')
    parser.add_argument('-l', '--language', choices=['ar', 'en'], 
                       help='Language (ar=Arabic, en=English)')
    
    args = parser.parse_args()
    
    # If no arguments provided, run in interactive mode
    if args.pdf is None:
        interactive_mode()
    else:
        if args.format is None:
            print(f"{Fore.RED}Error: --format is required when providing a PDF file")
            print(f"{Fore.YELLOW}Run 'python launcher.py --help' for usage information")
            sys.exit(1)
        command_line_mode(args)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}Interrupted by user. Exiting...")
        sys.exit(0)
