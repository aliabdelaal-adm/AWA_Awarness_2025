#!/usr/bin/env python3
"""
Test script for AWA Content Generation Platform
Tests all generation modules
"""

import sys
import os

# Add src to path
project_root = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(project_root)
sys.path.insert(0, os.path.join(parent_dir, 'src'))

from modules.presentation_generator import PresentationGenerator
from modules.report_generator import ReportGenerator
from modules.excel_generator import ExcelGenerator

def test_presentation_generator():
    """Test PowerPoint generation"""
    print("Testing PowerPoint Generator...")
    
    try:
        gen = PresentationGenerator()
        
        # Test data
        chunks = [
            "Introduction\nThis is a test presentation",
            "Section 1\nFirst section content goes here",
            "Section 2\nSecond section content with details"
        ]
        
        # Generate presentation
        output_path = gen.generate_from_chunks(
            chunks,
            title="Test Presentation",
            subtitle="Generated by AWA Platform",
            output_path="/tmp/test_presentation.pptx"
        )
        
        if os.path.exists(output_path):
            print(f"✓ PowerPoint generated successfully: {output_path}")
            os.remove(output_path)
            return True
        else:
            print("✗ PowerPoint generation failed")
            return False
            
    except Exception as e:
        print(f"✗ PowerPoint test failed: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_report_generator():
    """Test Word and PDF report generation"""
    print("\nTesting Report Generator...")
    
    try:
        gen = ReportGenerator()
        
        # Test data
        chunks = [
            "Introduction\nThis is a test report document",
            "Chapter 1\nFirst chapter content goes here with details",
            "Chapter 2\nSecond chapter content with more information"
        ]
        
        # Generate Word report
        word_path = gen.generate_word_report(
            chunks,
            title="Test Report",
            subtitle="Professional Document",
            output_path="/tmp/test_report.docx"
        )
        
        word_success = False
        if os.path.exists(word_path):
            print(f"✓ Word report generated successfully: {word_path}")
            os.remove(word_path)
            word_success = True
        else:
            print("✗ Word report generation failed")
        
        # Generate PDF report
        pdf_path = gen.generate_pdf_report(
            chunks,
            title="Test Report",
            subtitle="Professional Document",
            output_path="/tmp/test_report.pdf"
        )
        
        pdf_success = False
        if os.path.exists(pdf_path):
            print(f"✓ PDF report generated successfully: {pdf_path}")
            os.remove(pdf_path)
            pdf_success = True
        else:
            print("✗ PDF report generation failed")
            
        return word_success and pdf_success
            
    except Exception as e:
        print(f"✗ Report test failed: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_excel_generator():
    """Test Excel generation"""
    print("\nTesting Excel Generator...")
    
    try:
        gen = ExcelGenerator()
        
        # Test data
        chunks = [
            "Data Point 1\nValue: 100, Category: A",
            "Data Point 2\nValue: 200, Category: B",
            "Data Point 3\nValue: 300, Category: C"
        ]
        
        # Generate Excel file
        output_path = gen.generate_from_chunks(
            chunks,
            title="Test Data",
            output_path="/tmp/test_data.xlsx"
        )
        
        if os.path.exists(output_path):
            print(f"✓ Excel file generated successfully: {output_path}")
            os.remove(output_path)
            return True
        else:
            print("✗ Excel generation failed")
            return False
            
    except Exception as e:
        print(f"✗ Excel test failed: {e}")
        import traceback
        traceback.print_exc()
        return False


def run_all_tests():
    """Run all tests"""
    print("="*60)
    print("  AWA Content Generation Platform - Module Tests")
    print("="*60)
    print()
    
    results = []
    
    results.append(("PowerPoint Generator", test_presentation_generator()))
    results.append(("Report Generator", test_report_generator()))
    results.append(("Excel Generator", test_excel_generator()))
    
    print("\n" + "="*60)
    print("Test Results Summary:")
    print("="*60)
    
    all_passed = True
    for test_name, result in results:
        status = "✓ PASS" if result else "✗ FAIL"
        print(f"{status} - {test_name}")
        if not result:
            all_passed = False
    
    print("="*60)
    
    if all_passed:
        print("✓ All tests passed!")
        return 0
    else:
        print("✗ Some tests failed")
        return 1


if __name__ == '__main__':
    sys.exit(run_all_tests())
